<?php

/**
 * @file
 * Captcha.EU integration module.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function captchaeu_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.captchaeu':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('<a href=":url">Captcha.EU</a> is a service to protect your website from spam and abuse.', [':url' => 'https://captcha.eu/']) . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Enable Captcha.EU and CAPTCHA modules in Administration > Extend') . '</li>';
      $output .= '<li>' . t('You will now find a Captcha.EU tab in the CAPTCHA administration page available at: Administration > Configuration > People > CAPTCHA module settings > Captcha.EU') . '</li>';
      $output .= '<li>' . t('Register your web site at <a href=":url">https://captcha.eu/signup</a>', [':url' => 'https://captcha.eu/signup']) . '</li>';
      $output .= '<li>' . t('Input the public key and REST key into the Captcha.EU settings.') . '</li>';
      $output .= '<li>' . t('Visit the Captcha administration page and set where you want the Captcha.EU form to be presented: Administration > Configuration > People > CAPTCHA module settings') . '</li>';
      $output .= '</ol>';
      return $output;
  }
}

/**
 * Implements hook_captcha().
 */
function captchaeu_captcha($op, $captcha_type = '') {
  static $widget_counter = 0;

  switch ($op) {
    case 'list':
      return ['captchaeu'];

    case 'generate':
      $captcha = [];
      if ($captcha_type == 'captchaeu') {
        // Increment counter for unique IDs
        $widget_counter++;
        
        $config = \Drupal::config('captchaeu.settings');
        $renderer = \Drupal::service('renderer');
        $captchaeu_public_key = $config->get('public_key');
        $captchaeu_rest_key = $config->get('rest_key');

        if (!empty($captchaeu_public_key) && !empty($captchaeu_rest_key)) {
          // Build the captchaeu captcha form if public_key and rest_key are
          // configured. Captcha requires TRUE to be returned in solution.
          $captcha['solution'] = TRUE;
          $captcha['captcha_validate'] = 'captchaeu_captcha_validation';
          $captcha['form']['captcha_response'] = [
            '#type' => 'hidden',
            '#value' => 'Captcha.EU no captcha',
          ];

          // As the validate callback does not depend on sid or solution, this
          // captcha type can be displayed on cached pages.
          $captcha['cacheable'] = TRUE;

          // Get widget mode setting
          $widget_mode = $config->get('widget_mode') ?: 'invisible';
          
          // Generate unique IDs for this widget instance
          $widget_id = 'captcha-eu-widget-' . $widget_counter;
          $field_id = 'captcha_at_solution_' . $widget_counter;
          
          // Build widget HTML based on mode
          if ($widget_mode === 'widget') {
            // Widget mode - use the cpt_widget class structure
            $widget_theme = $config->get('widget_theme') ?: 'auto';
            
            $widget_markup = '<div id="' . $widget_id . '" class="captcha-eu-widget cpt_widget" data-key="' . $captchaeu_public_key . '"';
            $widget_markup .= ' data-theme="' . $widget_theme . '"';
            $widget_markup .= ' data-field-selector="#' . $field_id . '"';
            $widget_markup .= '></div>';
          } else {
            // Invisible mode - simple div
            $widget_markup = '<div id="' . $widget_id . '" class="captcha-eu-widget"></div>';
          }
          
          $captcha['form']['captchaeu_widget'] = [
            '#markup' => Markup::create($widget_markup . '<noscript>' . t('You need Javascript for CAPTCHA verification to submit this form.') . '</noscript>'),
            '#allowed_tags' => ['div', 'input', 'noscript'],
          ];
          
          // Add the solution field as a textarea to handle long tokens
          // This ensures JavaScript can update the value
          $captcha['form']['captcha_at_solution'] = [
            '#type' => 'textarea',
            '#title' => 'Captcha Solution',
            '#title_display' => 'invisible',
            '#default_value' => '',
            '#required' => FALSE,
            '#rows' => 1,
            '#resizable' => FALSE,
            '#attributes' => [
              'id' => $field_id,
              'style' => 'position: absolute; left: -9999px; width: 1px; height: 1px;',
              'tabindex' => '-1',
              'aria-hidden' => 'true',
            ],
          ];
          
          
          $captcha['form']['#attached'] = [
              'library' => [
                'captchaeu/captcha-eu-sdk',
              ],
              'drupalSettings' => [
                'captchaeu' => [
                  'publicKey' => $captchaeu_public_key,
                  'widgetMode' => $config->get('widget_mode') ?: 'invisible',
                  'widgetTheme' => $config->get('widget_theme') ?: 'auto',
                ],
              ],
            ];
        }
        else {
          if (\Drupal::currentUser()->hasPermission('administer CAPTCHA settings')) {
            \Drupal::messenger()->addWarning(t('Captcha.EU is not configured! Click <a href="@link">here</a> to configure Captcha.EU. In the meantime challenge type "math" is used as the example fallback.', ['@link' => Url::fromRoute('captchaeu.admin_settings_form')->toString()]));
          }
          // Fallback to Math captcha as captchaeu is not configured.
          $captcha = captcha_captcha('generate', 'Math');
        }

        // If module configuration changes the form cache need to be refreshed.
        $renderer->addCacheableDependency($captcha['form'], $config);
      }
      return $captcha;
  }
}

/**
 * CAPTCHA Callback; Validates the captchaeu code.
 */
function captchaeu_captcha_validation($solution, $response, $element, $form_state) {
  $config = \Drupal::config('captchaeu.settings');
  $requestStack = \Drupal::service('request_stack');
  
  // Get the captcha solution from the form
  $captchaSolution = $requestStack->getCurrentRequest()->request->get('captcha_at_solution');

  $captchaeu_rest_key = $config->get('rest_key');
  if (empty($captchaSolution) || empty($captchaeu_rest_key)) {
    // No solution provided - validation fails
    if ($config->get('enable_validation_logging')) {
      \Drupal::logger('captchaeu')->info('No captcha solution provided - validation failed');
    }
    return FALSE;
  }

  $options = [
    'json' => json_decode($captchaSolution, TRUE),
    'headers' => [
      'Content-Type' => 'application/json',
      'Rest-Key' => $captchaeu_rest_key,
    ],
    // Stop firing exception on response status code >= 300.
    'http_errors' => FALSE,
  ];
  
  $apiResponse = \Drupal::httpClient()->post('https://www.captcha.eu/validate', $options);
  $apiResponseContent = $apiResponse->getBody()->getContents();
  $result = json_decode($apiResponseContent, TRUE);
  
  if (isset($result['success']) && $result['success'] == TRUE) {
    if ($config->get('enable_validation_logging')) {
      \Drupal::logger('captchaeu')->info('Captcha validation successful');
    }
    return TRUE;
  }

  // Log any failed validation attempts, if validation logging is enabled:
  if ($config->get('enable_validation_logging')) {
    $loggerContent = new FormattableMarkup('Captcha validation failed: "@errors". Status code: "@status_code".', [
      '@status_code' => $apiResponse->getStatusCode(),
      '@errors' => isset($result['error']) ? $result['error'] : (isset($result['detail']) ? $result['detail'] : 'None'),
    ]);
    \Drupal::logger('captchaeu')->info($loggerContent->__toString());
  }
  return FALSE;
}